<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Presentation.PresentationSkin" locale="">
  <web>Presentation</web>
  <name>PresentationSkin</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1564816944000</creationDate>
  <parent>Presentation.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1565156921000</date>
  <contentUpdateDate>1565156921000</contentUpdateDate>
  <version>1.1</version>
  <title>Presentation Skin</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>true</hidden>
  <content>= Example =

Check out this [[Presentation about XWiki as web development platform&gt;&gt;XWikiPresentation]] to see this skin in action.

= Usage =

To use this Presentation Skin, follow these steps:

1. Create a document with some content such as for example:(((
{{code language="none"}}
= XWiki =

A collaborative development platform runtime based on the wiki paradigm


(% style="font-size: 70%;" %)
(((
Vincent Massol
October 2011
)))

=== Agenda ===

* What is XWiki?
* Development Capabilities
* Why use XWiki?
* QA

=== Slide 1 ===

This is a paragraph on slide 1

(% class="build" %)
* item 1
* item 2

=== Slide 2 ===

Hello world!

image:http://www.xwiki.org/xwiki/bin/download/ColorThemes/MainCT/logo.png

=== Slide 3 ===

|=Header1|=Header2
|//value1//|**value2**

##monospace##

=== Slide 4 ===

{{code language="java"}}
...
// Find all sections and create one &lt;article&gt; per section
def xdom =
   xwiki.getDocument("Main.Test2").getDocument().getXDOM()
xdom.getBlocks(new ClassBlockMatcher(
  HeaderBlock.class), Block.Axes.DESCENDANT).each()
{
...
}
{{/code}}
{{/code}}
)))
1. Attach an Object of type ##Presentation.PresentationClass##
1. Click the "Run the presentation" button!
</content>
  <attachment>
    <filename>logo.png</filename>
    <author>xwiki:XWiki.Admin</author>
    <date>1564816944000</date>
    <version>1.1</version>
    <comment/>
    <content>iVBORw0KGgoAAAANSUhEUgAAADMAAAAzCAYAAAA6oTAqAAAECklEQVR4XtWaMWgTURjH36AQMdobFBwU0k4ODh06ZMhwQweHtrl7LwEHhwxOpZWisXQQLASt0sGhg4NDBoeCDqIpdOxQJIUODhkydAjYoYNChw4OBZ/vP5SGkr7/Xd7l2jz4CDfk3f2+7733/77vTgx6VOq5zNy3exPlz7ezYpgHQJ42xlrzG2N6fmO0Y669oYWZ/57LA+TEZhtjhQsBCILAKxbDahjKj2GolnAdF2aukfO7YXAdF6BcLmeDQM0Vi+pDEMiX09PTt2JPUCzKtoHQJ2Ym3DMT30kTBg40zmydfY5YjoUnTkG6gWQHnkkDxvf9K8ahTQD0sKXIMAgpAHoDhVuVSiXjBsNBzH0+nf8Msh4DJqwC4HyTX3DDQcEEgVyz3R97J+5a3bcBGeCVQcBgiRNH7ksp74o4Qyl133jgt31itZTk0RyG4ZRZ4n8tETnEc4l+xsyMmjAAR5bJj80mLVnVvzHa5qKJiJR8AnIspcwTAHoYTDIg49GCDQgRAghZBYfkHlMiiQHvA2AQXoMIQjvs+1M+EUkOA7Bqv6E6MGKWiyuKBmSXHjSDGDj72UkTNUuAVkGzbCC4H5EAYlyVN4kGbGPpcFGUX8nS2gSwMwD3qNy2A6mGzaNQcALSTBSEb1rZIRGq96fupZ+YP+0SIQc1JkC1MyALxAEdou5uRhT7AcsSkJ44qHu6hiyBKbexRQsI7AjzpATARRUPbQH6R0SxJC7TQNJpe2AL6HKyAMv1jHi3kxe1pt/T3u4UxPJWNnZRx22VAeiKyOhnN/O66vk97fmNgp4V2VOQN82WWNnRxDoGyIuTJRAtWYcWUZDqSEsvetpuIx0D7Qnx+sc4ACIZoofB1f0X0aA/UZoSeuH6OACiGKJ3Epl2cpGRtSiRQQQjLbEXI+3IkcEAEPYF2TNeP70DEqG1KEDYF7Y9A5CEMwJZ6Xk8c6AFwjNMOgMg9fiSgKhJou6AeWWDxf/RAyAAqeRmh6RSrEbZT5jnwlIaVJR9ZM21KJVq6m8IUHeweqaXKOKtggWINcbTrzRR8trUHe1dALj3s917AOusUoRnXZsZAMarlYHB8JJX7aFSTKrNhCU5kO4M+ldJl7zY7BF6Ce8TjogKiLof4Zi2ANAGPQGqJKUlDwmItvWBtRAZfVVMmN+sZcmNwyHsHq4gBXiNiaIVJCNa+prQ5rdjrj2b01ifwJIl8PCjf+ySJJqI5AHSZez9zCOS9hz0Xs78pNlzLnkzwu+GwbVrLwFAPEvgdQkXRQ6T7jtN/rZZ7RJRJDDuDXqkSs7fAQCEqDKFiZM2ke8AHL7QIOruAMP3Lk9E+UTwAEKKNUomcITh384gtUHDMOXGOj+aL7UR0WwT0RwuIEQoDZD/0b05QnZ/b5kAAAAASUVORK5CYII=</content>
    <filesize>1091</filesize>
  </attachment>
  <attachment>
    <filename>logobig.png</filename>
    <author>xwiki:XWiki.Admin</author>
    <date>1564816944000</date>
    <version>1.1</version>
    <comment/>
    <content>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</content>
    <filesize>3754</filesize>
  </attachment>
  <attachment>
    <filename>prettify.js</filename>
    <author>xwiki:XWiki.Admin</author>
    <date>1564816944000</date>
    <version>1.1</version>
    <comment/>
    <content></content>
    <filesize>53996</filesize>
  </attachment>
  <attachment>
    <filename>print.css</filename>
    <author>xwiki:XWiki.Admin</author>
    <date>1564816944000</date>
    <version>1.1</version>
    <comment/>
    <content>CmJvZHkgewogICBoZWlnaHQ6IDEwMCU7Cn0KCi5zbGlkZXMgPiBhcnRpY2xlIHsKICAgZGlzcGxheTogYmxvY2s7CiAgIHBhZ2UtYnJlYWstYmVmb3JlOiBhbHdheXM7CiAgIG92ZXJmbG93OiBoaWRkZW47CiAgIHdpZHRoOiAxMDAlOwogICBoZWlnaHQ6IDEwMCU7CiAgIG1hcmdpbi1sZWZ0OiAwcHg7CiAgIG1hcmdpbi10b3A6IDBweDsKICB2aXNpYmlsaXR5OiB2aXNpYmxlOwogIC13ZWJraXQtdHJhbnNmb3JtOiBub25lOwogIHRyYW5zZm9ybTogbm9uZTsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgbGVmdDogMDsKICB0b3A6IDA7CiAgYm94LXNoYWRvdzogbm9uZTsKfQoKLnNsaWRlcyBhcnRpY2xlLmJpZ2xvZ28gewogIGJhY2tncm91bmQ6IHVybCgnbG9nby5wbmcnKSA3MTBweCA2MjVweCBuby1yZXBlYXQ7CiAtd2Via2l0LXByaW50LWNvbG9yLWFkanVzdDogZXhhY3Q7Cn0KCi5zbGlkZXMudGVtcGxhdGUtZGVmYXVsdCBhcnRpY2xlLmJpZ2xvZ28gewogIGJhY2tncm91bmQ6IHdoaXRlIHVybCgnbG9nb2JpZy5wbmcnKSA1MCUgNTAlIG5vLXJlcGVhdDsKIC13ZWJraXQtcHJpbnQtY29sb3ItYWRqdXN0OiBleGFjdDsKfQoKaDIgewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICB0b3A6IDQwMHB4OwogIGJvdHRvbTogYXV0bzsgIAp9Cgouc2xpZGVzID4gYXJ0aWNsZSB7Cn0KLnNsaWRlcyA+IGFydGljbGUuZmFyLW5leHQgfiBhcnRpY2xlIHsKICAtd2Via2l0LXRyYW5zZm9ybTogbm9uZTsKICB0cmFuc2Zvcm06IG5vbmU7Cn0KLnNsaWRlcyA+IGFydGljbGUuZmFyLXBhc3QgewogIHZpc2liaWxpdHk6IHZpc2libGU7CiAgLXdlYmtpdC10cmFuc2Zvcm06IG5vbmU7CiAgdHJhbnNmb3JtOiBub25lOwp9Ci5zbGlkZXMgPiBhcnRpY2xlLnBhc3QgewogIHZpc2liaWxpdHk6IHZpc2libGU7Cn0KLnNsaWRlcyA+IGFydGljbGUuY3VycmVudCB7CiAgdmlzaWJpbGl0eTogdmlzaWJsZTsKICAtd2Via2l0LXRyYW5zZm9ybTogbm9uZTsKICB0cmFuc2Zvcm06IG5vbmU7Cn0KLnNsaWRlcyA+IGFydGljbGUubmV4dCB7CiAgdmlzaWJpbGl0eTogdmlzaWJsZTsKICAtd2Via2l0LXRyYW5zZm9ybTogbm9uZTsKICB0cmFuc2Zvcm06IG5vbmU7Cn0KLnNsaWRlcyA+IGFydGljbGUuZmFyLW5leHQgewogIHZpc2liaWxpdHk6IHZpc2libGU7CiAgLXdlYmtpdC10cmFuc2Zvcm06IG5vbmU7CiAgdHJhbnNmb3JtOiBub25lOwp9Cgouc2xpZGVzLmxheW91dC13aWRlc2NyZWVuID4gYXJ0aWNsZS5mYXItcGFzdCwKLnNsaWRlcy5sYXlvdXQtZmF1eC13aWRlc2NyZWVuID4gYXJ0aWNsZS5mYXItcGFzdCB7CiAgLXdlYmtpdC10cmFuc2Zvcm06IG5vbmU7CiAgdHJhbnNmb3JtOiBub25lOwp9Ci5zbGlkZXMubGF5b3V0LXdpZGVzY3JlZW4gPiBhcnRpY2xlLnBhc3QsCi5zbGlkZXMubGF5b3V0LWZhdXgtd2lkZXNjcmVlbiA+IGFydGljbGUucGFzdCB7CiAgLXdlYmtpdC10cmFuc2Zvcm06IG5vbmU7CiAgdHJhbnNmb3JtOiBub25lOwp9Ci5zbGlkZXMubGF5b3V0LXdpZGVzY3JlZW4gPiBhcnRpY2xlLm5leHQsCi5zbGlkZXMubGF5b3V0LWZhdXgtd2lkZXNjcmVlbiA+IGFydGljbGUubmV4dCB7CiAgLXdlYmtpdC10cmFuc2Zvcm06IG5vbmU7CiAgdHJhbnNmb3JtOiBub25lOwp9Ci5zbGlkZXMubGF5b3V0LXdpZGVzY3JlZW4gPiBhcnRpY2xlLmZhci1uZXh0LAouc2xpZGVzLmxheW91dC1mYXV4LXdpZGVzY3JlZW4gPiBhcnRpY2xlLmZhci1uZXh0IHsKICAtd2Via2l0LXRyYW5zZm9ybTogbm9uZTsKICB0cmFuc2Zvcm06IG5vbmU7Cn0KCmFydGljbGU6bm90KC5ub2JhY2tncm91bmQpOm5vdCguZmlsbCk6bm90KC5iaWdsb2dvKTphZnRlciB7CiAgYm90dG9tOiAyMHB4OwogIGNvbnRlbnQ6IGNvdW50ZXIocG5vKSAiLyIgYXR0cih0cG4pOwogIGxlZnQ6IDIwcHg7CiAgcG9zaXRpb246IGFic29sdXRlOwp9Cg==</content>
    <filesize>1924</filesize>
  </attachment>
  <attachment>
    <filename>slides.js</filename>
    <author>xwiki:XWiki.Admin</author>
    <date>1564816944000</date>
    <version>1.1</version>
    <comment/>
    <content></content>
    <filesize>14966</filesize>
  </attachment>
  <attachment>
    <filename>styles.css</filename>
    <author>xwiki:XWiki.Admin</author>
    <date>1564816944000</date>
    <version>1.1</version>
    <comment/>
    <content></content>
    <filesize>9809</filesize>
  </attachment>
  <object>
    <name>Presentation.PresentationSkin</name>
    <number>0</number>
    <className>XWiki.DocumentSheetBinding</className>
    <guid>0091e8a9-12d8-418d-98db-ca6236019533</guid>
    <class>
      <name>XWiki.DocumentSheetBinding</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <sheet>
        <cache>0</cache>
        <classname/>
        <customDisplay/>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <hint/>
        <idField/>
        <multiSelect>0</multiSelect>
        <name>sheet</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Sheet</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators/>
        <size>30</size>
        <sort>none</sort>
        <sql/>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <valueField/>
        <classType>com.xpn.xwiki.objects.classes.PageClass</classType>
      </sheet>
    </class>
    <property>
      <sheet/>
    </property>
  </object>
  <object>
    <name>Presentation.PresentationSkin</name>
    <number>0</number>
    <className>XWiki.XWikiSkins</className>
    <guid>95909a9a-4b59-4340-af3d-62c56a7ccc61</guid>
    <class>
      <name>XWiki.XWikiSkins</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <baseskin>
        <disabled>0</disabled>
        <name>baseskin</name>
        <number>2</number>
        <prettyName>Base Skin</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </baseskin>
      <edit.vm>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>edit.vm</name>
        <number>10</number>
        <prettyName>Edit</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </edit.vm>
      <footer.vm>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>footer.vm</name>
        <number>7</number>
        <prettyName>Footer</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </footer.vm>
      <header.vm>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>header.vm</name>
        <number>6</number>
        <prettyName>Header</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </header.vm>
      <logo>
        <disabled>0</disabled>
        <name>logo</name>
        <number>3</number>
        <prettyName>Logo</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </logo>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <outputSyntax>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>outputSyntax</name>
        <number>4</number>
        <prettyName>Output Syntax</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>html/5.0=HTML 5|xhtml/1.0=XHTML 1.0</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </outputSyntax>
      <style.css>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>style.css</name>
        <number>5</number>
        <prettyName>Style</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </style.css>
      <view.vm>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>view.vm</name>
        <number>9</number>
        <prettyName>View</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </view.vm>
      <viewheader.vm>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>viewheader.vm</name>
        <number>8</number>
        <prettyName>View Header</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </viewheader.vm>
    </class>
    <property>
      <baseskin/>
    </property>
    <property>
      <edit.vm/>
    </property>
    <property>
      <footer.vm/>
    </property>
    <property>
      <header.vm/>
    </property>
    <property>
      <logo/>
    </property>
    <property>
      <name>HTML5 Presentation</name>
    </property>
    <property>
      <outputSyntax/>
    </property>
    <property>
      <style.css>#template('colorThemeInit.vm')

.wikimodel-emptyline {
  height: 1em;
}

.loading {
  background: url("$xwiki.getSkinFile('icons/xwiki/spinner.gif')") no-repeat scroll center center transparent;
}

.code, .box {
  background-color: $theme.backgroundSecondaryColor;
  border: 1px dotted $theme.borderColor;
  font-size: 70%;
  line-height: 120%
}

.code, .code pre, .code *  {
  font-family: courier, "courier new", monospace;
  white-space: pre;
}

th {
  background-color: #F3F3F3
}
</style.css>
    </property>
    <property>
      <view.vm>&lt;!DOCTYPE html&gt;

&lt;!-- Adapted from http://code.google.com/p/html5slides/ --&gt;

&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;$doc.plainTitle&lt;/title&gt;
    &lt;meta charset='utf-8'&gt;
    &lt;script src='$xwiki.getSkinFile("js/prototype/prototype.js")'&gt;&lt;/script&gt;
#if(!$request.print)
    &lt;script src='$xwiki.getSkinFile("slides.js")'&gt;&lt;/script&gt;
#end
    &lt;script src='$xwiki.getSkinFile("js/xwiki/xwiki.js")'&gt;&lt;/script&gt;
    &lt;!-- com.xpn.xwiki.plugin.skinx.JsResourceSkinExtensionPlugin --&gt;
    &lt;!-- com.xpn.xwiki.plugin.skinx.JsSkinFileExtensionPlugin --&gt;
    &lt;!-- com.xpn.xwiki.plugin.skinx.JsSkinExtensionPlugin --&gt;
    &lt;script type="text/javascript" src="$xwiki.getSkinFile("js/xwiki/markerScript.js", false)" defer="defer"&gt;&lt;/script&gt;
    &lt;link href='$xwiki.getSkinFile("style.css")' rel="stylesheet" type="text/css"/&gt;
#if($request.print)
    &lt;link href='$xwiki.getSkinFile("styles.css")' rel="stylesheet" type="text/css"/&gt;
    &lt;link href='$xwiki.getSkinFile("print.css")' rel="stylesheet" type="text/css"/&gt;
#end
    &lt;!-- com.xpn.xwiki.plugin.skinx.CssResourceSkinExtensionPlugin --&gt;
    &lt;!-- com.xpn.xwiki.plugin.skinx.CssSkinExtensionPlugin --&gt;
    &lt;!-- com.xpn.xwiki.plugin.skinx.CssSkinFileExtensionPlugin --&gt;
  &lt;/head&gt;

#if($request.print)
  &lt;body&gt;
#else
  &lt;body style='display: none'&gt;
#end
    #set($presentation = $doc.getObject("Presentation.PresentationClass"))
    #set($layout = $presentation.getProperty("layout").value)
    #if ("$!layout" == "")
      #set ($layout = "layout-regular")
    #end
    #set($theme = $presentation.getProperty("theme").value)
    #if ("$!theme" == "")
      #set ($theme = "template-default")
    #end

    &lt;section class='slides $layout $theme'&gt;

      &lt;article class='biglogo'&gt;
      &lt;/article&gt;

      #includeInContext("Presentation.PresentationSlideGenerator")

    &lt;/section&gt;

  &lt;/body&gt;
&lt;/html&gt;</view.vm>
    </property>
    <property>
      <viewheader.vm/>
    </property>
  </object>
</xwikidoc>
